SD_V <<- meanEstimatorV + c(-3, -2, -1, 1, 2, 3) * asymptoticSE_V
## Calculate the number of bins to apply
varbinwd <- lambda
## Compute plot title
mainTitle <- paste("Sample variances distribution with superimposed\ntheoretical gaussian distribution curve\nfor", nosim, "means of", n, "exponentially distributed values")
ggplot(data = sampleData, aes(x = sample)) +
geom_histogram(aes(y = ..density..), fill = I("gold"),
binwidth = varbinwd, color = I("black")) +
stat_function(fun = dnorm,
arg = list(mean = 1/lambda^2,
sd = asymptoticSE_V)) +
ggtitle(mainTitle) +
theme_bw() +
xlab("Mean of sample variances") +
ylab("Density") +
geom_vline(xintercept = 1/lambda^2, colour="blue",
linetype = "solid") +
geom_vline(xintercept =
sampleData$cumulatedMeanOfSampleVariances[nosim],
colour="red", linetype = "solid") +
geom_vline(xintercept = SD_V,
colour="green", linetype = "longdash") +
geom_text(aes(x=1/lambda^2, label="Asymptotic variance",
y=0.75), colour="blue", angle=0, vjust = 1.2) +
geom_text(aes(x=meanEstimatorV, label="Sample variance",
y=0.67), colour="red", angle=0, vjust = 1.2)
rm(list = ls())
n  <- 40
nosim <- 1000
lambda <- 0.2
asymptoticSE_V <<- sqrt(2/(n - 1))/lambda^2
set.seed(1096)
samples <- matrix(data = rexp(n * nosim, lambda),
nrow = nosim)
View(samples)
sampleDataV <- data.frame(sampleVariance = apply(samples, 1, var))
View(sampleDataV)
View(sampleDataV)
View(samples)
View(sampleDataV)
View(sampleDataV)
sampleDataV$cumulatedMeanOfSampleVariances <-
cumsum(sampleDataV$sampleVariance)/
seq_along(sampleDataV$sampleVariance)
View(sampleDataV)
View(sampleDataV)
View(samples)
sampleDataV <- data.frame(sampleVariance = apply(samples, 1, var))/n
View(sampleDataV)
sampleDataV$cumulatedMeanOfSampleVariances <-
cumsum(sampleDataV$sampleVariance)/
seq_along(sampleDataV$sampleVariance)
View(sampleDataV)
sampleData$cumulatedVarianceOfSampleVariances <-
cumsum((sampleData$sampleVariance - 1/lambda^2/n)^2)/
(seq_along(sampleData$sampleVariance - 1))
sampleDataV$cumulatedVarianceOfSampleVariances <-
cumsum((sampleData$sampleVariance - 1/lambda^2/n)^2)/
(seq_along(sampleData$sampleVariance - 1))
sampleDataV$cumulatedVarianceOfSampleVariances <-
cumsum((sampleDataV$sampleVariance - 1/lambda^2/n)^2)/
(seq_along(sampleDataV$sampleVariance - 1))
View(sampleDataV)
sampleVarianceSE <<- sd(sampleData$sampleVariance)
sampleVarianceSE <<- sd(sampleDataV$sampleVariance)
meanEstimatorV <<- sampleDataV$cumulatedMeanOfSampleVariances[nosim]
asymptoticSE_V <<- sqrt(2/(n - 1))/lambda^2
SD_V <<- meanEstimatorV + c(-3, -2, -1, 1, 2, 3) * asymptoticSE_V
varbinwd <- lambda
mainTitle <- paste("Sample variances distribution with superimposed\ntheoretical gaussian distribution curve\nfor", nosim, "means of", n, "exponentially distributed values")
ggplot(data = sampleData, aes(x = sampleVariance)) +
geom_histogram(aes(y = ..density..), fill = I("gold"),
binwidth = varbinwd, color = I("black")) +
stat_function(fun = dnorm,
arg = list(mean = 1/lambda^2,
sd = asymptoticSE_V)) +
ggtitle(mainTitle) +
theme_bw() +
xlab("Mean of sample variances") +
ylab("Density") +
geom_vline(xintercept = 1/lambda^2, colour="blue",
linetype = "solid") +
geom_vline(xintercept =
sampleData$cumulatedMeanOfSampleVariances[nosim],
colour="red", linetype = "solid") +
geom_vline(xintercept = SD_V,
colour="green", linetype = "longdash") +
geom_text(aes(x=1/lambda^2, label="Asymptotic variance",
y=0.75), colour="blue", angle=0, vjust = 1.2) +
geom_text(aes(x=meanEstimatorV, label="Sample variance",
y=0.67), colour="red", angle=0, vjust = 1.2)
mainTitle <- paste("Sample variances distribution with superimposed\ntheoretical gaussian distribution curve\nfor", nosim, "means of", n, "exponentially distributed values")
ggplot(data = sampleDataV, aes(x = sampleVariance)) +
geom_histogram(aes(y = ..density..), fill = I("gold"),
binwidth = varbinwd, color = I("black")) +
stat_function(fun = dnorm,
arg = list(mean = 1/lambda^2,
sd = asymptoticSE_V)) +
ggtitle(mainTitle) +
theme_bw() +
xlab("Mean of sample variances") +
ylab("Density") +
geom_vline(xintercept = 1/lambda^2, colour="blue",
linetype = "solid") +
geom_vline(xintercept =
sampleDataV$cumulatedMeanOfSampleVariances[nosim],
colour="red", linetype = "solid") +
geom_vline(xintercept = SD_V,
colour="green", linetype = "longdash") +
geom_text(aes(x=1/lambda^2, label="Asymptotic variance",
y=0.75), colour="blue", angle=0, vjust = 1.2) +
geom_text(aes(x=meanEstimatorV, label="Sample variance",
y=0.67), colour="red", angle=0, vjust = 1.2)
geom_vline(xintercept = 1/lambda^2/n, colour="blue",
)
n  <- 40
nosim <- 1000
lambda <- 0.2
## Estimate standard error of sample variance:
asymptoticSE_V <<- sqrt(2/(n - 1))/lambda^2
set.seed(1096)
### distribution.
samples <- matrix(data = rexp(n * nosim, lambda),
nrow = nosim)
### Calculate sample means and sample variances for each of the samples
sampleDataV <- data.frame(sampleVariance = apply(samples, 1, var))/n
### Calculate the cumulative means and variances of the sample variances
sampleDataV$cumulatedMeanOfSampleVariances <-
cumsum(sampleDataV$sampleVariance)/
seq_along(sampleDataV$sampleVariance)
sampleDataV$cumulatedVarianceOfSampleVariances <-
cumsum((sampleDataV$sampleVariance - 1/lambda^2/n)^2)/
(seq_along(sampleDataV$sampleVariance - 1))
sampleVarianceSE <<- sd(sampleDataV$sampleVariance)
meanEstimatorV <<- sampleDataV$cumulatedMeanOfSampleVariances[nosim]
## Used to plot vertical lines corresponding to SD intervals:
SD_V <<- meanEstimatorV + c(-3, -2, -1, 1, 2, 3) * asymptoticSE_V
## Calculate the number of bins to apply
varbinwd <- lambda
## Compute plot title
mainTitle <- paste("Sample variances distribution with superimposed\ntheoretical gaussian distribution curve\nfor", nosim, "means of", n, "exponentially distributed values")
ggplot(data = sampleDataV, aes(x = sampleVariance)) +
geom_histogram(aes(y = ..density..), fill = I("gold"),
binwidth = varbinwd, color = I("black")) +
stat_function(fun = dnorm,
arg = list(mean = 1/lambda^2,
sd = asymptoticSE_V)) +
ggtitle(mainTitle) +
theme_bw() +
xlab("Mean of sample variances") +
ylab("Density") +
geom_vline(xintercept = 1/lambda^2/n, colour="blue",
linetype = "solid") +
geom_vline(xintercept =
sampleDataV$cumulatedMeanOfSampleVariances[nosim],
colour="red", linetype = "solid") +
geom_vline(xintercept = SD_V,
colour="green", linetype = "longdash") +
geom_text(aes(x=1/lambda^2, label="Asymptotic variance",
y=0.75), colour="blue", angle=0, vjust = 1.2) +
geom_text(aes(x=meanEstimatorV, label="Sample variance",
y=0.67), colour="red", angle=0, vjust = 1.2)
asymptoticSE_V <<- sqrt(2/(n - 1))/lambda^2/n
n  <- 40
nosim <- 1000
lambda <- 0.2
## Estimate standard error of sample variance:
asymptoticSE_V <<- sqrt(2/(n - 1))/lambda^2/n
set.seed(1096)
### distribution.
samples <- matrix(data = rexp(n * nosim, lambda),
nrow = nosim)
### Calculate sample means and sample variances for each of the samples
sampleDataV <- data.frame(sampleVariance = apply(samples, 1, var))/n
### Calculate the cumulative means and variances of the sample variances
sampleDataV$cumulatedMeanOfSampleVariances <-
cumsum(sampleDataV$sampleVariance)/
seq_along(sampleDataV$sampleVariance)
sampleDataV$cumulatedVarianceOfSampleVariances <-
cumsum((sampleDataV$sampleVariance - 1/lambda^2/n)^2)/
(seq_along(sampleDataV$sampleVariance - 1))
sampleVarianceSE <<- sd(sampleDataV$sampleVariance)
meanEstimatorV <<- sampleDataV$cumulatedMeanOfSampleVariances[nosim]
## Used to plot vertical lines corresponding to SD intervals:
SD_V <<- meanEstimatorV + c(-3, -2, -1, 1, 2, 3) * asymptoticSE_V
## Calculate the number of bins to apply
varbinwd <- lambda
## Compute plot title
mainTitle <- paste("Sample variances distribution with superimposed\ntheoretical gaussian distribution curve\nfor", nosim, "means of", n, "exponentially distributed values")
ggplot(data = sampleDataV, aes(x = sampleVariance)) +
geom_histogram(aes(y = ..density..), fill = I("gold"),
binwidth = varbinwd, color = I("black")) +
stat_function(fun = dnorm,
arg = list(mean = 1/lambda^2/n,
sd = asymptoticSE_V)) +
ggtitle(mainTitle) +
theme_bw() +
xlab("Mean of sample variances") +
ylab("Density") +
geom_vline(xintercept = 1/lambda^2/n, colour="blue",
linetype = "solid") +
geom_vline(xintercept =
sampleDataV$cumulatedMeanOfSampleVariances[nosim],
colour="red", linetype = "solid") +
geom_vline(xintercept = SD_V,
colour="green", linetype = "longdash") +
geom_text(aes(x=1/lambda^2, label="Asymptotic variance",
y=0.75), colour="blue", angle=0, vjust = 1.2) +
geom_text(aes(x=meanEstimatorV, label="Sample variance",
y=0.67), colour="red", angle=0, vjust = 1.2)
n  <- 40
nosim <- 1000
lambda <- 0.2
## Estimate standard error of sample variance:
asymptoticSE_V <<- sqrt(2/(n - 1))/lambda^2/n
set.seed(1096)
### distribution.
samples <- matrix(data = rexp(n * nosim, lambda),
nrow = nosim)
### Calculate sample means and sample variances for each of the samples
sampleDataV <- data.frame(sampleVariance = apply(samples, 1, var))/n
### Calculate the cumulative means and variances of the sample variances
sampleDataV$cumulatedMeanOfSampleVariances <-
cumsum(sampleDataV$sampleVariance)/
seq_along(sampleDataV$sampleVariance)
sampleDataV$cumulatedVarianceOfSampleVariances <-
cumsum((sampleDataV$sampleVariance - 1/lambda^2/n)^2)/
(seq_along(sampleDataV$sampleVariance - 1))
sampleVarianceSE <<- sd(sampleDataV$sampleVariance)
meanEstimatorV <<- sampleDataV$cumulatedMeanOfSampleVariances[nosim]
## Used to plot vertical lines corresponding to SD intervals:
SD_V <<- meanEstimatorV + c(-3, -2, -1, 1, 2, 3) * asymptoticSE_V
## Calculate the number of bins to apply
varbinwd <- lambda
## Compute plot title
mainTitle <- paste("Sample variances distribution with superimposed\ntheoretical gaussian distribution curve\nfor", nosim, "means of", n, "exponentially distributed values")
ggplot(data = sampleDataV, aes(x = sampleVariance)) +
geom_histogram(aes(y = ..density..), fill = I("gold"),
binwidth = varbinwd, color = I("black")) +
stat_function(fun = dnorm,
arg = list(mean = 1/lambda^2/n,
sd = asymptoticSE_V)) +
ggtitle(mainTitle) +
theme_bw() +
xlab("Mean of sample variances") +
ylab("Density") +
geom_vline(xintercept = 1/lambda^2/n, colour="blue",
linetype = "solid") +
geom_vline(xintercept =
sampleDataV$cumulatedMeanOfSampleVariances[nosim],
colour="red", linetype = "solid") +
geom_vline(xintercept = SD_V,
colour="green", linetype = "longdash") +
geom_text(aes(x=1/lambda^2/n, label="Asymptotic variance",
y=0.75), colour="blue", angle=0, vjust = 1.2) +
geom_text(aes(x=meanEstimatorV, label="Sample variance",
y=0.67), colour="red", angle=0, vjust = 1.2)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?diff
shiny::runApp()
?IQR
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
n  <- 40
nosim <- 1000
lambda <- 0.2
## Estimate standard error of sample variance:
asymptoticSE_V <<- sqrt(2/(n - 1))/lambda^2/n
set.seed(1096)
### distribution.
samples <- matrix(data = rexp(n * nosim, lambda), nrow = nosim)
### Calculate sample means and sample variances for each of the samples
sampleDataV <- data.frame(sampleVariance = apply(samples, 1, var))/n
### Calculate the cumulative means and variances of the sample variances
sampleDataV$cumulatedMeanOfSampleVariances <-
cumsum(sampleDataV$sampleVariance)/
seq_along(sampleDataV$sampleVariance)
sampleDataV$cumulatedVarianceOfSampleVariances <-
cumsum((sampleDataV$sampleVariance - 1/lambda^2/n)^2)/
(seq_along(sampleDataV$sampleVariance - 1))
sampleVarianceSE <<- sd(sampleDataV$sampleVariance)
meanEstimatorV <<- sampleDataV$cumulatedMeanOfSampleVariances[nosim]
## Used to plot vertical lines corresponding to SD intervals:
SD_V <<- meanEstimatorV + c(-3, -2, -1, 1, 2, 3) * asymptoticSE_V
## Calculate the number of bins to apply
varbinwd <- 3.5 * asymptoticSE_V / nosim^(1/3)
## Compute plot title
mainTitle <- paste("Sample variances distribution with superimposed\ntheoretical gaussian distribution curve\nfor", nosim, "means of", n, "exponentially distributed values")
ggplot(data = sampleDataV, aes(x = sampleVariance)) +
geom_histogram(aes(y = ..density..), fill = I("gold"),
binwidth = varbinwd, color = I("black")) +
stat_function(fun = dnorm,
arg = list(mean = 1/lambda^2/n,
sd = asymptoticSE_V)) +
ggtitle(mainTitle) +
theme_bw() +
xlab("Mean of sample variances") +
ylab("Density") +
geom_vline(xintercept = 1/lambda^2/n, colour="blue",
linetype = "solid", size = 0.8) +
geom_vline(xintercept =
sampleDataV$cumulatedMeanOfSampleVariances[nosim],
colour="red", linetype = "solid", size = 0.8) +
geom_vline(xintercept = SD_V,
colour="green", linetype = "longdash", size = 0.6) +
geom_text(aes(x=1/lambda^2/n, label="Asymptotic variance",
y=0.78), colour="blue", angle=0, vjust = 1.2) +
geom_text(aes(x=meanEstimatorV, label="Sample variance",
y=0.65), colour="red", angle=0, vjust = 1.2)
View(sampleDataV)
shiny::runApp()
shiny::runApp()
sampleDataV$cumulatedMeanOfSampleVariances[nosim]
nosim
rm(list = ls())
n  <- 40
nosim <- 1000
lambda <- 0.2
## Estimate standard error of sample variance:
asymptoticSE_V <<- sqrt(2/(n - 1))/lambda^2/n
set.seed(1096)
### distribution.
samples <- matrix(data = rexp(n * nosim, lambda), nrow = nosim)
### Calculate sample means and sample variances for each of the samples
sampleDataV <- data.frame(sampleVariance = apply(samples, 1, var))/n
### Calculate the cumulative means and variances of the sample variances
sampleDataV$cumulatedMeanOfSampleVariances <-
cumsum(sampleDataV$sampleVariance)/
seq_along(sampleDataV$sampleVariance)
sampleDataV$cumulatedVarianceOfSampleVariances <-
cumsum((sampleDataV$sampleVariance - 1/lambda^2/n)^2)/
(seq_along(sampleDataV$sampleVariance - 1))
sampleVarianceSE <<- sd(sampleDataV$sampleVariance)
meanEstimatorV <<- sampleDataV$cumulatedMeanOfSampleVariances[nosim]
## Used to plot vertical lines corresponding to SD intervals:
SD_V <<- meanEstimatorV + c(-3, -2, -1, 1, 2, 3) * asymptoticSE_V
## Calculate the number of bins to apply
varbinwd <- 3.5 * asymptoticSE_V / nosim^(1/3)
## Compute plot title
mainTitle <- paste("Sample variances distribution with superimposed\ntheoretical gaussian distribution curve\nfor", nosim, "means of", n, "exponentially distributed values")
ggplot(data = sampleDataV, aes(x = sampleVariance)) +
geom_histogram(aes(y = ..density..), fill = I("gold"),
binwidth = varbinwd, color = I("black")) +
stat_function(fun = dnorm,
arg = list(mean = 1/lambda^2/n,
sd = asymptoticSE_V)) +
ggtitle(mainTitle) +
theme_bw() +
xlab("Mean of sample variances") +
ylab("Density") +
geom_vline(xintercept = 1/lambda^2/n, colour="blue",
linetype = "solid", size = 0.8) +
geom_vline(xintercept =
sampleDataV$cumulatedMeanOfSampleVariances[nosim],
colour="red", linetype = "solid", size = 0.8) +
geom_vline(xintercept = SD_V,
colour="green", linetype = "longdash", size = 0.6) +
meanEstimatorV
meanEstimatorV
n  <- 20
nosim <- 1000
lambda <- 0.2
## Estimate standard error of sample variance:
asymptoticSE_V <<- sqrt(2/(n - 1))/lambda^2/n
set.seed(1096)
### distribution.
samples <- matrix(data = rexp(n * nosim, lambda), nrow = nosim)
### Calculate sample means and sample variances for each of the samples
sampleDataV <- data.frame(sampleVariance = apply(samples, 1, var))/n
### Calculate the cumulative means and variances of the sample variances
sampleDataV$cumulatedMeanOfSampleVariances <-
cumsum(sampleDataV$sampleVariance)/
seq_along(sampleDataV$sampleVariance)
sampleDataV$cumulatedVarianceOfSampleVariances <-
cumsum((sampleDataV$sampleVariance - 1/lambda^2/n)^2)/
(seq_along(sampleDataV$sampleVariance - 1))
sampleVarianceSE <<- sd(sampleDataV$sampleVariance)
meanEstimatorV <<- sampleDataV$cumulatedMeanOfSampleVariances[nosim]
## Used to plot vertical lines corresponding to SD intervals:
SD_V <<- meanEstimatorV + c(-3, -2, -1, 1, 2, 3) * asymptoticSE_V
## Calculate the number of bins to apply
varbinwd <- 3.5 * asymptoticSE_V / nosim^(1/3)
## Compute plot title
mainTitle <- paste("Sample variances distribution with superimposed\ntheoretical gaussian distribution curve\nfor", nosim, "means of", n, "exponentially distributed values")
ggplot(data = sampleDataV, aes(x = sampleVariance)) +
geom_histogram(aes(y = ..density..), fill = I("gold"),
binwidth = varbinwd, color = I("black")) +
stat_function(fun = dnorm,
arg = list(mean = 1/lambda^2/n,
sd = asymptoticSE_V)) +
ggtitle(mainTitle) +
theme_bw() +
xlab("Mean of sample variances") +
ylab("Density") +
geom_vline(xintercept = 1/lambda^2/n, colour="blue",
linetype = "solid", size = 0.8) +
geom_vline(xintercept =
sampleDataV$cumulatedMeanOfSampleVariances[nosim],
colour="red", linetype = "solid", size = 0.8) +
geom_vline(xintercept = SD_V,
colour="green", linetype = "longdash", size = 0.6)
View(sampleDataV)
nosim
sampleData$cumulatedMeanOfSampleVariances[nosim]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?rowMeans
?rowVar
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?dchisq
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(sampleDataV)
shiny::runApp()
shiny::runApp()
plot(dchisq(sampleDataV[1], n-1))
View(sampleDataV)
plot(dchisq(nosim, n-1))
plot(dchisq(sampleDataV$sampleVariance, n-1))
plot(dchisq(sampleDataV$sampleVariance, 1000, 39))
shiny::runApp()
shiny::runApp()
plot(dnorm(0, 9))
?dnorm
shiny::runApp()
?stat_function
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
